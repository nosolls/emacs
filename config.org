* Ivy, Counsel, Swiper
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (counsel-mode 1)
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("M-y" . counsel-yank-pop)
    ("<f1> f" . counsel-describe-function)
    ("<f1> v" . counsel-describe-variable)
    ("<f1> l" . counsel-find-library)
    ("<f2> i" . counsel-info-lookup-symbol)
    ("<f2> u" . counsel-unicode-char)
    ("<f2> j" . counsel-set-variable))
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    :bind
    ("C-x b" . ivy-switch-buffer)
    ("C-c v" . ivy-push-view)
    ("C-c V" . ivy-pop-view)
    ("C-c C-r" . ivy-resume))
  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper-isearch))
#+end_src
* which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
* Switch-Window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "r" "s" "t" "n" "e" "i"))
    :bind
        ([remap other-window] . switch-window))
 #+end_src
* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :config
    ;; Fix homerow, as I do not use qwerty
    (setq avy-keys '(?a ?r ?s ?t ?n ?e ?i ?o ?g ?m))
    :bind
    ("C-;" . avy-goto-word-1))
#+end_src
* Window Splitting
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (defun delete-and-balance-window ()
    (interactive)
    (delete-window)
    (balance-windows))
  (global-set-key (kbd "C-2") 'split-and-follow-horizontally)
  (global-set-key (kbd "C-3") 'split-and-follow-vertically)
  (global-set-key (kbd "C-0") 'delete-and-balance-window)
#+end_src
* Appearance
** Theme
 #+begin_src emacs-lisp
   (use-package moe-theme
     :ensure t
     :init
       (add-hook 'after-init-hook 
		(lambda () (load-theme 'moe-dark t))))
 #+end_src
** Easier parantheses tracking
 #+begin_src emacs-lisp
   (use-package rainbow-delimiters
     :ensure t
     :init
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
 #+end_src
* Minor things
Surprisingly long for "minor things"
** Show lines/columns
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
  (setq-default indent-tabs-mode nil)
#+end_src
** No bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src
** y-or-n
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** No backups
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src
** UTF-8
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
** Better looks
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq inhibit-startup-screen t)
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+end_src
** Pretty symbols
#+begin_src emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+end_src
** Fixes indenting
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t)
#+end_src
** Electric
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      ))
  (electric-pair-mode t)
#+end_src
** Emojify
#+begin_src emacs-lisp
  (use-package emojify
    :ensure t
    :config (global-emojify-mode 1))
#+end_src
** sudo edit
 #+begin_src emacs-lisp
   (use-package sudo-edit
     :ensure t
     :bind ("s-e" . sudo-edit))
 #+end_src
** Terminal
 Setting default shell to bash
 #+begin_src emacs-lisp
   (defvar my-term-shell "/bin/bash")
   (defadvice ansi-term (before force-bash)
     (interactive (list my-term-shell)))
   (ad-activate 'ansi-term)
 #+end_src
* Org
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
** Fix setup
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src
* Config
** Edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
** Reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* Auto Completion
** Finish text
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
* docker
** dockerfile
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src
** docker-compose
#+begin_src emacs-lisp
  (use-package docker-compose-mode
    :ensure t)
#+end_src
* erc
** Gets rid of clutter
#+begin_src emacs-lisp
  (setq erc-nick "nosolls")
  (setq erc-prompt (lambda () (concat "[" (buffer-name) "]")))
  (setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+end_src
** Server list
#+begin_src emacs-lisp
  (setq erc-server-history-list '("irc.freenode.net"
                                  "localhost"))
#+end_src
** Highlight nicknames
#+begin_src emacs-lisp
  (use-package erc-hl-nicks
    :ensure t
    :config
      (erc-update-modules))
#+end_src
* magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+end_src
* vterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src
* dired
#+begin_src emacs-lisp
  (use-package dired-subtree
    :ensure t
    :after dired
    :bind (:map dired-mode-map
		("<tab>" . dired-subtree-toggle)
		("<S-iso-lefttab>" . dired-subtree-cycle)))
#+end_src
