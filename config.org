* emacs.d

I'm trying to clean up my Emacs setup. There's a lot I still have to work on with this.

* Looks

Make things pretty.

*** Diminish

Prevent pollution of the modeline with minor modes.

  #+begin_src emacs-lisp
    (use-package diminish
      :ensure t)
  #+end_src

*** Theme

This is THE dark theme I was looking for, and eventually it'll come with Emacs.

  #+begin_src emacs-lisp
    (use-package modus-vivendi-theme
      :ensure t
      :init
      (add-hook 'after-init-hook
              (lambda () (load-theme 'modus-vivendi t))))
  #+end_src

*** Easier parantheses tracking

  #+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :init
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
  #+end_src

* Quality of Life Changes

Just the little things. Vanilla Emacs has a lot that has to be changed. I think a lot of these things should just be the default.

*** Show lines/columns

Remove crap from GUI.

  #+begin_src emacs-lisp
    (line-number-mode 1)
    (column-number-mode 1)
    (setq-default indent-tabs-mode nil)
    (fringe-mode 1)
  #+end_src

*** No bell

Does anyone leave this on?

  #+begin_src emacs-lisp
    (setq ring-bell-function 'ignore)
  #+end_src

*** y-or-n

  #+begin_src emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src

*** No backups

  #+begin_src emacs-lisp
    (setq make-backup-files nil)
    (setq auto-save-default nil)
  #+end_src

*** Bind ESC to C-g

Just nice to have.

#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+end_src

*** UTF-8

  #+begin_src emacs-lisp
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
  #+end_src

*** Better looks

  #+begin_src emacs-lisp
    (setq scroll-conservatively 100)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (setq inhibit-startup-message t)
    (setq inhibit-startup-screen t)
    (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
  #+end_src

*** Pretty symbols

  #+begin_src emacs-lisp
    (when window-system (global-prettify-symbols-mode t))
  #+end_src

*** Fixes indenting

  #+begin_src emacs-lisp
    (use-package aggressive-indent
      :ensure t)
  #+end_src

*** Electric

  #+begin_src emacs-lisp
    (setq electric-pair-pairs
          '(
            (?\( . ?\))
            (?\[ . ?\])
            (?\{ . ?\})))
    (electric-pair-mode 1)
  #+end_src

*** sudo edit

  #+begin_src emacs-lisp
    (use-package sudo-edit
      :ensure t
      :bind
      ("s-e" . sudo-edit))
  #+end_src

*** Terminal

  Setting default shell to bash

  #+begin_src emacs-lisp
    (defvar my-term-shell "/bin/bash")
    (defadvice ansi-term (before force-bash)
      (interactive (list my-term-shell)))
    (ad-activate 'ansi-term)
  #+end_src

*** Edit

  #+begin_src emacs-lisp
    (defun config-visit ()
      (interactive)
      (find-file "~/.emacs.d/config.org"))
    (global-set-key (kbd "C-c e") 'config-visit)
  #+end_src

*** Reload

  #+begin_src emacs-lisp
    (defun config-reload ()
      (interactive)
      (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
    (global-set-key (kbd "C-c r") 'config-reload)
  #+end_src
* Text Editing / Navigation

What everyone talks about.

*** Xah Fly Keys
#+begin_src emacs-lisp
  ;; Disable ctrl/meta shortcuts in xfk
  (setq xah-fly-use-control-key nil)
  (setq xah-fly-use-meta-key nil)
  ;; Install
  (use-package xah-fly-keys
    :ensure t)
  ;; Create layout
  (defvar xah--dvorak-to-colemak-mod-dh-matrix-kmap
   '(("'" . "q")
     ("," . "w")
     ("." . "f")
     ("p" . "p")
     ("y" . "b")
     ("f" . "j")
     ("g" . "l")
     ("c" . "u")
     ("r" . "y")
     ("l" . ";")
     ("a" . "a")
     ("o" . "r")
     ("e" . "s")
     ("u" . "t")
     ("i" . "g")
     ("d" . "m")
     ("h" . "n")
     ("t" . "e")
     ("n" . "i")
     ("s" . "o")
     (";" . "z")
     ("q" . "x")
     ("j" . "c")
     ("k" . "d")
     ("x" . "v")
     ("b" . "k")
     ("m" . "h")
     ("w" . ",")
     ("v" . ".")
     ("z" . "/")))
  ;; set layout
  (xah-fly-keys-set-layout 'colemak-mod-dh-matrix)
  (xah-fly-keys 1)
  (diminish 'xah-fly-keys)
#+end_src
*** Switch-Window

  #+begin_src emacs-lisp
    (use-package switch-window
      :ensure t
      :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
            '("a" "r" "s" "t" "n" "e" "i")))
    (define-key xah-fly-command-map (kbd ",") 'switch-window)
   #+end_src

*** Window Splitting

Just added balancing by default.

  #+begin_src emacs-lisp
    (defun split-and-follow-horizontally ()
      (interactive)
      (split-window-below)
      (balance-windows)
      (other-window 1))
    (defun split-and-follow-vertically ()
      (interactive)
      (split-window-right)
      (balance-windows)
      (other-window 1))
    (defun delete-and-balance-window ()
      (interactive)
      (delete-window)
      (balance-windows))
    (define-key xah-fly-command-map (kbd "1") 'delete-other-windows)
    (define-key xah-fly-command-map (kbd "2") 'split-and-follow-horizontally)
    (define-key xah-fly-command-map (kbd "3") 'split-and-follow-vertically)
    (define-key xah-fly-command-map (kbd "4") 'delete-and-balance-window)
  #+end_src

*** Avy

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :config
    ;; Fix homerow, as I do not use qwerty
    (setq avy-keys '(?a ?r ?s ?t ?n ?e ?i ?o ?g ?m)))
  (define-key xah-fly-command-map (kbd "v") 'avy-goto-char)
#+end_src

* Completion
*** Ivy, counsel, swiper
  #+begin_src emacs-lisp
    (use-package counsel
      :ensure t
      :config
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      :init
      (ivy-mode 1)
      (counsel-mode 1)
      :diminish ivy-mode counsel-mode)
    ;; Standard bindings
    (define-key xah-fly-command-map (kbd "k") 'swiper)
    (define-key xah-fly-command-map (kbd "SPC uf") 'counsel-find-file)
    (global-set-key (kbd "M-y") 'counsel-yank-pop)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "<f2> j") 'counsel-set-variable)
    (define-key xah-fly-command-map (kbd "SPC t") 'ivy-switch-buffer)
    (global-set-key (kbd "C-c v") 'ivy-push-view)
    (global-set-key (kbd "C-c V") 'ivy-pop-view)
    ;; Shell / System tools
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c L") 'counsel-git-log)
  #+end_src
*** which-key

  Everyone should have this. It's nice to have when you forget a command.

    #+begin_src emacs-lisp
      (use-package which-key
        :ensure t
        :init
        (which-key-mode)
        :diminish which-key-mode)
    #+end_src

*** Finish text

  #+begin_src emacs-lisp
    (use-package company
      :ensure t
      :init
      (add-hook 'after-init-hook 'global-company-mode)
      :diminish company-mode)
  #+end_src

*** docker

**** dockerfile

   #+begin_src emacs-lisp
     (use-package dockerfile-mode
       :ensure t
       :init
       (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
   #+end_src

**** docker-compose

   #+begin_src emacs-lisp
     (use-package docker-compose-mode
       :ensure t)
   #+end_src

*** go mode

  #+begin_src emacs-lisp
    (use-package go-mode
      :ensure t)
    (autoload 'go-mode "go-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  #+end_src

* Applications

*** Org

**** Org Bullets

   #+begin_src emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+end_src

**** Fix setup

   #+begin_src emacs-lisp
     (setq org-src-window-setup 'current-window)
   #+end_src
   
*** dired

**** Subtree

   #+begin_src emacs-lisp
     (use-package dired-subtree
       :ensure t
       :bind
       (:map dired-mode-map
             ("<tab>" . dired-subtree-toggle)
             ("<S-iso-lefttab>" . dired-subtree-cycle)))
   #+end_src

**** Async

   #+begin_src emacs-lisp
     (use-package async
       :ensure t
       :diminish dired-async-mode
       :init
       (dired-async-mode 1))
   #+end_src

*** vterm

  #+begin_src emacs-lisp
    (use-package vterm
      :ensure t)
  #+end_src

*** magit

  #+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :config
      (setq git-commit-summary-max-length 50))
  #+end_src

*** erc

**** Gets rid of clutter

   #+begin_src emacs-lisp
     (setq erc-nick "nosolls")
     (setq erc-prompt (lambda () (concat "[" (buffer-name) "]")))
     (setq erc-hide-list '("JOIN" "PART" "QUIT"))
   #+end_src

**** Server list

   #+begin_src emacs-lisp
     (setq erc-server-history-list '("irc.freenode.net"
                                     "localhost"))
   #+end_src

**** Highlight nicknames

   #+begin_src emacs-lisp
     (use-package erc-hl-nicks
       :ensure t
       :config
       (erc-update-modules))
   #+end_src

