* Xah Fly Keys
This is the biggest package for me when it comes to emacs. Usually install things here if they're related to xfk or need a binding.
** Save your hands
#+BEGIN_SRC emacs-lisp
  (use-package xah-fly-keys
    :ensure t)
#+END_SRC
** My layout
#+BEGIN_SRC emacs-lisp
  ;; create layout
  (defvar xah--dvorak-to-colemak-mod-dh-matrix-kmap
   '(("'" . "q")
     ("," . "w")
     ("." . "f")
     ("p" . "p")
     ("y" . "b")
     ("f" . "j")
     ("g" . "l")
     ("c" . "u")
     ("r" . "y")
     ("l" . ";")
     ("a" . "a")
     ("o" . "r")
     ("e" . "s")
     ("u" . "t")
     ("i" . "g")
     ("d" . "m")
     ("h" . "n")
     ("t" . "e")
     ("n" . "i")
     ("s" . "o")
     (";" . "z")
     ("q" . "x")
     ("j" . "c")
     ("k" . "d")
     ("x" . "v")
     ("b" . "k")
     ("m" . "h")
     ("w" . ",")
     ("v" . ".")
     ("z" . "/")))
  ;; set layout
  (xah-fly-keys-set-layout 'colemak-mod-dh-matrix)
  (xah-fly-keys 1) 
#+END_SRC
** which-key
 Displays possible keybindings. Useful for Xah Fly Keys and emacs in general.
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :init
     (which-key-mode))
 #+END_SRC
** Switch-Window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "r" "s" "t" "n" "e" "i")))
  ;; add to xfk
  (with-eval-after-load 'xah-fly-keys
    (define-key xah-fly-command-map (kbd ",") 'switch-window))
 #+END_SRC
** Avy
 #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :config
     ;; Fix homerow, as I do not use qwerty
     (setq avy-keys '(?a ?r ?s ?t ?n ?e ?i ?o ?g ?m)))
   ;; add to xfk
   (with-eval-after-load 'xah-fly-keys
     (define-key xah-fly-command-map (kbd "v") 'avy-goto-char))
 #+END_SRC
** Window Splitting
I'll probably rebind these somewhere else in the future. Movement would be more useful on those keys.
 #+BEGIN_SRC emacs-lisp
   ;; functions for splitting windows
   (defun split-and-follow-horizontally ()
     (interactive)
     (split-window-below)
     (balance-windows)
     (other-window 1))
   (defun split-and-follow-vertically ()
     (interactive)
     (split-window-right)
     (balance-windows)
     (other-window 1))
   (defun delete-and-balance-window ()
     (interactive)
     (delete-window)
     (balance-windows))
   ;; add to xfk
   (with-eval-after-load 'xah-fly-keys
     (define-key xah-fly-command-map (kbd "2") 'split-and-follow-horizontally)
     (define-key xah-fly-command-map (kbd "3") 'split-and-follow-vertically)
     (define-key xah-fly-command-map (kbd "4") 'delete-and-balance-window))
 #+END_SRC
** Ivy, swiper, counsel
*** install
 #+BEGIN_SRC emacs-lisp
   (use-package counsel
     :ensure t)
 #+END_SRC
*** Keybindings
Temporary until I add more.
 #+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'xah-fly-keys
     (define-key xah-fly-command-map (kbd "k") 'swiper)
     (define-key xah-fly-command-map (kbd "SPC u f") 'counsel-find-file)
     (define-key xah-fly-command-map (kbd "SPC t") 'ivy-switch-buffer))
 #+END_SRC
* Appearance
** Theme
 #+BEGIN_SRC emacs-lisp
   (use-package moe-theme
     :ensure t
     :init
       (add-hook 'after-init-hook 
	     (lambda () (load-theme 'moe-light t))))
 #+END_SRC
** Easier parantheses tracking
 #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
     :ensure t
     :init
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
 #+END_SRC
* Minor things
** Show lines/columns
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** No bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** No backups
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** UTF-8
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
** Better looks
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq inhibit-startup-screen t)
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC
** Pretty symbols
#+BEGIN_SRC emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC
** Fixes indenting
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t)
#+END_SRC
** Electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      ))
  (electric-pair-mode t)
#+END_SRC
** Emojify
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :config (global-emojify-mode 1))
#+END_SRC
** sudo edit
 #+BEGIN_SRC emacs-lisp
   (use-package sudo-edit
     :ensure t
     :bind ("s-e" . sudo-edit))
 #+END_SRC
** Terminal
 Setting default shell to bash
 #+BEGIN_SRC emacs-lisp
   (defvar my-term-shell "/bin/bash")
   (defadvice ansi-term (before force-bash)
     (interactive (list my-term-shell)))
   (ad-activate 'ansi-term)
 #+END_SRC
** Esc bound to C-g
 #+BEGIN_SRC emacs-lisp
   (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
 #+END_SRC
* Org
** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Basics
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
* Config
** Edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** Reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Auto Completion
** Finish text
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* docker
** dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC
** docker-compose
#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode
    :ensure t)
#+END_SRC
* erc
** Gets rid of clutter
#+BEGIN_SRC emacs-lisp
  (setq erc-nick "nosolls")
  (setq erc-prompt (lambda () (concat "[" (buffer-name) "]")))
  (setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC
** Server list
#+BEGIN_SRC emacs-lisp
  (setq erc-server-history-list '("irc.freenode.net"
                                  "localhost"))
#+END_SRC
** Highlight nicknames
#+BEGIN_SRC emacs-lisp
  (use-package erc-hl-nicks
    :ensure t
    :config
      (erc-update-modules))
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC



